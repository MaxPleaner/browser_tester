doctype html
html
  head
    script src='./jquery.js'
    script src='./jquery-ui.js'

    sass:
    
      body, html
        width: 100%
        height: 100%
        background-color: lightgrey
        color: black
        font-family: monospace

      pre
        white-space: pre-wrap

      textarea
        width: 400px
        height: 200px
        position: relative

      .logMsg
      
      .bordered
        border-left: 1px dotted grey
        padding-left: 20px

      input
        background-color: lightgrey
        color: black

      button
        background-color: lightgrey
        color: black

      .blackbox
        display: block
        margin: 5px
        padding: 5px

      .hidden
        display: none

      .inlinebox
        display: inline-block
        margin: 5px
        padding: 5px

      .command
        display: inline-block
        border: 1px dotted grey
        word-wrap: word-break
        margin: 15px
        float: left
        padding: 5px

      .center
        text-align: center

      .module
        display: block
        float: left
        border: 1px solid grey
        margin: 5px
        padding: 5px

      .module-command
        display: block
        border: 1px solid grey
        padding: 10px
        margin: 5px

      pre
        background-color: darkgrey

      .sortable-module-command-list
        list-style-type: none
        min-width: 175px
        min-height: 100px

      .clearfix
        clear: both

      .drop-destination-hover
        box-shadow: 0 0 10px yellow

      .cool-hr
        display: none
        width: 350px
        border-color: yellow
        margin-left: 10px
        margin: 15px

      textarea


  body
    == yield

  coffee:

    # use elements with a 'toggles' attribute as triggers to toggle open/close
    # other elements.
    # The value of the attribute is a CSS selector that points to the target
    # Functionally, all this does is toggle on/off the .hidden class.
    # A target can be given this class to be hidden when the page loads. 
    #
    window.initToggling = ->
      $toggleTriggers = $("*[toggles]")
      $toggleTriggers.off("click").on "click", (e) ->
        targetSelector = $(e.currentTarget).attr "toggles"
        $target = $ targetSelector
        $target.toggleClass "hidden"
        true

    # A method used to require confirmation before submitting a form
    # This is applied to the 'destroy' forms in the app. 
    #
    window.confirmSubmit = (e) ->
      if confirm("are you sure")
        true # continue with the event
      else
        e.preventDefault()
        false

    # A generic helper method to see if an object is a Hash (and not an Array)
    #
    window.isHash = (obj) ->
      obj && !(Array.isArray(obj)) && (obj.constructor == Object)

    # Given a message string, append it to the DOM.
    # This is how incoming websocket messages are displayed
    # requires that there being a #log container
    #
    window.printLog = (msg) ->
      $logMsg = $("<div class='logMsg'></div>").html(msg)
      $removeBtn = $("<button class='removeLogMsg'><b>clear</b></button>")
      $("#log").removeClass("hidden").append($logMsg.prepend($removeBtn))
      logMsgRemoveListener($removeBtn)

    # If a logged message is clicked, it will be removed from the DOM
    # All log messages are removed when the page refreshes anyway
    #
    window.logMsgRemoveListener = ($removeBtn) ->
      $removeBtn.off("click").on 'click', (e) ->
        $logMsg = $(e.currentTarget).parents(".logMsg")
        $logMsg.remove()

    # Websocket API
    #
    window.SocketHelpers = ->

      # start a websocket connection
      #
      this.ws = new WebSocket("ws://#{window.document.location.host}/")

      # event when websocket opens
      # not used
      #
      this.ws.onopen = =>

      # event when a websocket message is received.
      # parse the message as JSON, make sure it's a hash, and look for a 'log' key.
      # If one is given, attach the 'log' value to the "#log" container on the DOM.
      #
      this.ws.onmessage = (msg) ->
        data = JSON.parse msg.data
        if isHash(data) && Object.keys(data).includes("log")
          printLog JSON.stringify $.makeArray data.log

      # event when a websocket closes
      # not used
      this.ws.onclose = ->

      this